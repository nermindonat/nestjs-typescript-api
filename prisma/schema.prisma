// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Customer {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  name      String
  surname   String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime?  @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  favorites Favorite[]
  carts     Cart[]
  orders    Order[]

  @@map("customers")
}

model Cart {
  id         Int        @id @default(autoincrement())
  customerId Int?       @unique
  customer   Customer?  @relation(fields: [customerId], references: [id])
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime?  @updatedAt @map("updated_at")
  deletedAt  DateTime?  @map("deleted_at")
  cartItems  CartItem[]

  @@map("carts")
}

model CartItem {
  id               Int             @id @default(autoincrement())
  cartId           Int
  cart             Cart            @relation(fields: [cartId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  productId        Int
  product          Product         @relation(fields: [productId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  productVariantId Int?            @map("product_variant_id")
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  quantity         Int
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime?       @updatedAt @map("updated_at")
  deletedAt        DateTime?       @map("deleted_at")

  @@map("cart_items")
}

model Order {
  id          Int       @id @default(autoincrement())
  customerId  Int?      @map("customer_id")
  customer    Customer? @relation(fields: [customerId], references: [id])
  totalAmount Float     @map("total_amount")
  status      String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("orders")
}

model Favorite {
  id         Int       @id @default(autoincrement())
  customerId Int       @map("customer_id")
  customer   Customer  @relation(fields: [customerId], references: [id])
  productId  Int       @map("product_id")
  product    Product   @relation(fields: [productId], references: [id])
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@unique([customerId, productId])
  @@map("favorites")
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String
  description     String?
  price           Float
  image           String?
  productVariants ProductVariant[]
  favorites       Favorite[]
  cartItems       CartItem[]

  @@map("products")
}

model Variant {
  id     Int            @id @default(autoincrement())
  name   String
  values VariantValue[]

  @@map("variant")
}

model VariantValue {
  id              Int              @id @default(autoincrement())
  variantId       Int              @map("variant_id")
  variant         Variant          @relation(fields: [variantId], references: [id])
  value           String
  productVariants ProductVariant[]

  @@map("variant_value")
}

model ProductVariant {
  id             Int          @id @default(autoincrement())
  productId      Int          @map("product_id")
  product        Product      @relation(fields: [productId], references: [id])
  variantValueId Int          @map("variant_value_id")
  variantValue   VariantValue @relation(fields: [variantValueId], references: [id])
  cartItems      CartItem[]

  @@map("product_variant")
}

model City {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  plateCode       Int?              @unique @map("plate_code")
  createdAt       DateTime?         @default(now()) @map("created_at")
  updatedAt       DateTime?         @updatedAt @map("updated_at")
  deletedAt       DateTime?         @map("deleted_at")
  districts       District[]
  customerAddress CustomerAddress[]

  @@map("cities")
}

model District {
  id              Int               @id @default(autoincrement())
  cityId          Int               @map("city_id")
  city            City              @relation(fields: [cityId], references: [id])
  name            String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime?         @updatedAt @map("updated_at")
  deletedAt       DateTime?         @map("deleted_at")
  Neighbourhood   Neighbourhood[]
  customerAddress CustomerAddress[]

  @@unique([name, cityId])
  @@map("districts")
}

model Neighbourhood {
  id              Int               @id @default(autoincrement())
  districtId      Int               @map("district_id")
  district        District          @relation(fields: [districtId], references: [id])
  name            String
  createdAt       DateTime?         @default(now()) @map("created_at")
  updatedAt       DateTime?         @updatedAt @map("updated_at")
  deletedAt       DateTime?         @map("deleted_at")
  customerAddress CustomerAddress[]

  @@unique([name, districtId])
  @@map("neighbourhoods")
}

model CustomerAddress {
  id              Int           @id @default(autoincrement())
  name            String
  surname         String
  phone           String
  address         String
  addressTitle    String        @map("address_title")
  cityId          Int           @map("city_id")
  city            City          @relation(fields: [cityId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  districtId      Int           @map("district_id")
  district        District      @relation(fields: [districtId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  neighbourhoodId Int           @map("neighbourhood_id")
  neighbourhood   Neighbourhood @relation(fields: [neighbourhoodId], references: [id])
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")

  @@map("customer_addresses")
}
